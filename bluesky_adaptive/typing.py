import collections
from typing import Any, Iterator, Protocol, Tuple, runtime_checkable


# Minimal stub of Container-like behavior, matching how Container inherits from BaseClient, Mapping, etc.
@runtime_checkable
class ContainerLike(Protocol, collections.abc.Mapping):
    def __repr__(self) -> str: ...
    @property
    def sorting(self) -> list[tuple[str, int]]: ...
    def new_variation(self, **kwargs) -> "ContainerLike": ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __getitem__(self, key: str) -> Any: ...
    def delete(self, key: str) -> None: ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def search(self, query: Any) -> "ContainerLike": ...
    def distinct(self, *args, **kwargs) -> Any: ...
    def sort(self, *args, **kwargs) -> "ContainerLike": ...
    def export(self, filepath: str, fields=None, *, format=None) -> None: ...


@runtime_checkable
class BlueskyRunLike(ContainerLike, Protocol):
    @property
    def start(self) -> dict[str, Any]: ...

    @property
    def stop(self) -> dict[str, Any] | None: ...

    def describe(self, obj: Any) -> dict[str, Any]: ...

    def documents(self, fill: bool = False) -> Iterator[Tuple[str, Any]]: ...

    @property
    def v2(self):
        return self
